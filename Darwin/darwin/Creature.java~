
import structure5.*;
import java.util.*;
import java.util.Random;

/**
 * This class represents one creature on the board.
 * Each creature must remember its species, position, direction,
 * and the world in which it is living.
 * <p>
 * In addition, the Creature must remember the next instruction
 * out of its program to execute.
 * <p>
 * The creature is also repsonsible for making itself appear in
 * the WorldMap.  In fact, you should only update the WorldMap from
 * inside the Creature class.  
 */

public class Creature {


    Species species; 
    World<Creature> world;
    Position pos;
    int dir;
    int i; // next instruction
	
    /**
     * Create a creature of the given species, with the indicated
     * position and direction.  Note that we also pass in the 
     * world-- remember this world, so that you can check what
     * is in front of the creature and to update the board
     * when the creature moves.
     */
    public Creature(Species species,
		    World<Creature> world,
		    Position pos,
		    int dir, int i) {

	this.species = species;
	this.world = world;
	this.pos = pos;
	this.dir = dir;
	this.i = i;
	
    }

    /**
     * Return the species of the creature.
     */
    public Species species() {
	return species;
    }

    /**
     * Return the current direction of the creature.
     */
    public int direction() {
	return dir;
    }

    /**
     * Return the position of the creature.
     */
    public Position position() {
	return pos;
    }

    /**
     * Execute steps from the Creature's program until 
     * a hop, left, right, or infect instruction is executed.
     */
    public void takeOneTurn() {

	Instruction inst = species.programStep(i);

	if(inst.toString().equals("left")) {

	    dir = leftFrom(dir);
	   
	}

	else if (inst.toString().equals("right")) {

	    dir = rightFrom(dir);
	}

	else if (inst.toString().contains("go")) {

	    i = inst.getAddress();
	    takeOneTurn();
	   	    
	}

	else if (inst.toString().contains("infect")) {
	    // CHECK IF CREATURE
	    if (world.get(pos.getAdjacent(dir)).species() != species) {
		if (world.get(pos.getAdjacent(dir)) !=  null) {
		    int step = 1;
		    if (inst.getAddress() != 0) {
			step = inst.getAddress(); // get instruction number
		    }
		    Creature infected = new Creature(species, world, pos.getAdjacent(dir), dir, step);
		    world.set(pos.getAdjacent(dir), infected);
		    WorldMap.displaySquare(pos.getAdjacent(dir), species.getName().charAt(0), dir, species.getColor()); 
		}
		
		else {
		    i ++;
		    takeOneTurn();
		}
	    }
	}

	else if (inst.toString().equals("hop")) {

	    if (world.inRange(pos.getAdjacent(dir))) {
		world.set(pos, null); // set current position to null
		WorldMap.displaySquare(pos, ' ', dir, species.getColor()); // clear square from worldmap
		pos = pos.getAdjacent(dir); // get new position
		world.set(pos, this); // put creature in new position
		WorldMap.displaySquare(pos,species.getName().charAt(0), dir, species.getColor());
	    }
	}

	else if (inst.toString().contains("ifempty")) {

	    if (world.inRange(pos.getAdjacent(dir)) && world.get(pos.getAdjacent(dir)) == null) {
		i = inst.getAddress();
	    }
	    else {
		i++;
	    }
	    
	    takeOneTurn();
	}

	else if (inst.toString().contains("ifwall")) {

	    if (world.inRange(pos.getAdjacent(dir))) {
		i++;
	    }
	    else {
		i = inst.getAddress();
	    }

	    takeOneTurn();
	    
	}

	else if (inst.toString().contains("ifsame")) {

	    if (world.get(pos.getAdjacent(dir)) != null && world.get(pos.getAdjacent(dir)).species().equals(species)) {
		i = inst.getAddress();
	    }
	    else {
		i++;
	    }
	    takeOneTurn();
	}

	else if (inst.toString().contains("ifenemy")) {
	    if (world.get(pos.getAdjacent(dir)) != null && world.get(pos.getAdjacent(dir)).species() != species ) {
		i = inst.getAddress();
	    }
	    else {
		i++;
	    }
	    takeOneTurn();
	}
	
	else if (inst.toString().contains("ifrandom")) {
	    Random random = new Random();
	    if ((random.nextInt()%2) == 0) {
		i = inst.getAddress();
	    }
	    else {
		i++;
	    }
	    takeOneTurn();
	}
	
    }

    /**
     * Return the compass direction the is 90 degrees left of
     * the one passed in.
     */
    public static int leftFrom(int direction) {
	Assert.pre(0 <= direction && direction < 4, "Bad direction");
	return (4 + direction - 1) % 4;
    }

    /**
     * Return the compass direction the is 90 degrees right of
     * the one passed in.
     */
    public static int rightFrom(int direction) {
	Assert.pre(0 <= direction && direction < 4, "Bad direction");
	return (direction + 1) % 4;
    }

    /**
     */
    public static void main(String st[]) {

	// test creature code here.
	WorldMap.createWorldMap(6,6);
	World<Creature> world = new World<Creature>(6,6);//create 6X6 world 
	Position pos = new Position(0,3); //initial position of creature
	Species spec = new Species("Rover.txt"); // species for creature
	int dir = 1; //direction for creature
	int i = 1; //first instruction for creature
	Creature one = new Creature (spec, world, pos, dir, i);
	one.takeOneTurn(); //Move Rover forward one space
	one.takeOneTurn(); //Move Rover forward another space
	one.takeOneTurn(); //Try to move rover
  
    }


}
